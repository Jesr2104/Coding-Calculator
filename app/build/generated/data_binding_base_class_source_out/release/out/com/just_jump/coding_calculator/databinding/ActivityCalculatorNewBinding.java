// Generated by view binder compiler. Do not edit!
package com.just_jump.coding_calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.button.MaterialButton;
import com.just_jump.coding_calculator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCalculatorNewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView ResultField;

  @NonNull
  public final TextView Title;

  @NonNull
  public final MaterialButton buttonBack;

  @NonNull
  public final EditText expressionValue;

  @NonNull
  public final MaterialButton historic;

  @NonNull
  public final ConstraintLayout layoutBlock1;

  @NonNull
  public final ConstraintLayout layoutBlock2;

  @NonNull
  public final Button number0;

  @NonNull
  public final Button number1;

  @NonNull
  public final Button number2;

  @NonNull
  public final Button number3;

  @NonNull
  public final Button number4;

  @NonNull
  public final Button number5;

  @NonNull
  public final Button number6;

  @NonNull
  public final Button number7;

  @NonNull
  public final Button number8;

  @NonNull
  public final Button number9;

  @NonNull
  public final Button numberAllClear;

  @NonNull
  public final MaterialButton numberBackSpace;

  @NonNull
  public final Button numberCloseParenthesis;

  @NonNull
  public final Button numberDivide;

  @NonNull
  public final Button numberLess;

  @NonNull
  public final Button numberMultiply;

  @NonNull
  public final Button numberOpenParenthesis;

  @NonNull
  public final Button numberPercentage;

  @NonNull
  public final Button numberPlus;

  @NonNull
  public final Button numberPlusLess;

  @NonNull
  public final Button numberPoint;

  @NonNull
  public final Button numberResult;

  private ActivityCalculatorNewBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView ResultField, @NonNull TextView Title, @NonNull MaterialButton buttonBack,
      @NonNull EditText expressionValue, @NonNull MaterialButton historic,
      @NonNull ConstraintLayout layoutBlock1, @NonNull ConstraintLayout layoutBlock2,
      @NonNull Button number0, @NonNull Button number1, @NonNull Button number2,
      @NonNull Button number3, @NonNull Button number4, @NonNull Button number5,
      @NonNull Button number6, @NonNull Button number7, @NonNull Button number8,
      @NonNull Button number9, @NonNull Button numberAllClear,
      @NonNull MaterialButton numberBackSpace, @NonNull Button numberCloseParenthesis,
      @NonNull Button numberDivide, @NonNull Button numberLess, @NonNull Button numberMultiply,
      @NonNull Button numberOpenParenthesis, @NonNull Button numberPercentage,
      @NonNull Button numberPlus, @NonNull Button numberPlusLess, @NonNull Button numberPoint,
      @NonNull Button numberResult) {
    this.rootView = rootView;
    this.ResultField = ResultField;
    this.Title = Title;
    this.buttonBack = buttonBack;
    this.expressionValue = expressionValue;
    this.historic = historic;
    this.layoutBlock1 = layoutBlock1;
    this.layoutBlock2 = layoutBlock2;
    this.number0 = number0;
    this.number1 = number1;
    this.number2 = number2;
    this.number3 = number3;
    this.number4 = number4;
    this.number5 = number5;
    this.number6 = number6;
    this.number7 = number7;
    this.number8 = number8;
    this.number9 = number9;
    this.numberAllClear = numberAllClear;
    this.numberBackSpace = numberBackSpace;
    this.numberCloseParenthesis = numberCloseParenthesis;
    this.numberDivide = numberDivide;
    this.numberLess = numberLess;
    this.numberMultiply = numberMultiply;
    this.numberOpenParenthesis = numberOpenParenthesis;
    this.numberPercentage = numberPercentage;
    this.numberPlus = numberPlus;
    this.numberPlusLess = numberPlusLess;
    this.numberPoint = numberPoint;
    this.numberResult = numberResult;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCalculatorNewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCalculatorNewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_calculator_new, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCalculatorNewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Result_field;
      TextView ResultField = rootView.findViewById(id);
      if (ResultField == null) {
        break missingId;
      }

      id = R.id.Title;
      TextView Title = rootView.findViewById(id);
      if (Title == null) {
        break missingId;
      }

      id = R.id.button_back;
      MaterialButton buttonBack = rootView.findViewById(id);
      if (buttonBack == null) {
        break missingId;
      }

      id = R.id.expression_value;
      EditText expressionValue = rootView.findViewById(id);
      if (expressionValue == null) {
        break missingId;
      }

      id = R.id.historic;
      MaterialButton historic = rootView.findViewById(id);
      if (historic == null) {
        break missingId;
      }

      id = R.id.layoutBlock1;
      ConstraintLayout layoutBlock1 = rootView.findViewById(id);
      if (layoutBlock1 == null) {
        break missingId;
      }

      id = R.id.layoutBlock2;
      ConstraintLayout layoutBlock2 = rootView.findViewById(id);
      if (layoutBlock2 == null) {
        break missingId;
      }

      id = R.id.number0;
      Button number0 = rootView.findViewById(id);
      if (number0 == null) {
        break missingId;
      }

      id = R.id.number1;
      Button number1 = rootView.findViewById(id);
      if (number1 == null) {
        break missingId;
      }

      id = R.id.number2;
      Button number2 = rootView.findViewById(id);
      if (number2 == null) {
        break missingId;
      }

      id = R.id.number3;
      Button number3 = rootView.findViewById(id);
      if (number3 == null) {
        break missingId;
      }

      id = R.id.number4;
      Button number4 = rootView.findViewById(id);
      if (number4 == null) {
        break missingId;
      }

      id = R.id.number5;
      Button number5 = rootView.findViewById(id);
      if (number5 == null) {
        break missingId;
      }

      id = R.id.number6;
      Button number6 = rootView.findViewById(id);
      if (number6 == null) {
        break missingId;
      }

      id = R.id.number7;
      Button number7 = rootView.findViewById(id);
      if (number7 == null) {
        break missingId;
      }

      id = R.id.number8;
      Button number8 = rootView.findViewById(id);
      if (number8 == null) {
        break missingId;
      }

      id = R.id.number9;
      Button number9 = rootView.findViewById(id);
      if (number9 == null) {
        break missingId;
      }

      id = R.id.numberAllClear;
      Button numberAllClear = rootView.findViewById(id);
      if (numberAllClear == null) {
        break missingId;
      }

      id = R.id.numberBackSpace;
      MaterialButton numberBackSpace = rootView.findViewById(id);
      if (numberBackSpace == null) {
        break missingId;
      }

      id = R.id.numberCloseParenthesis;
      Button numberCloseParenthesis = rootView.findViewById(id);
      if (numberCloseParenthesis == null) {
        break missingId;
      }

      id = R.id.numberDivide;
      Button numberDivide = rootView.findViewById(id);
      if (numberDivide == null) {
        break missingId;
      }

      id = R.id.numberLess;
      Button numberLess = rootView.findViewById(id);
      if (numberLess == null) {
        break missingId;
      }

      id = R.id.numberMultiply;
      Button numberMultiply = rootView.findViewById(id);
      if (numberMultiply == null) {
        break missingId;
      }

      id = R.id.numberOpenParenthesis;
      Button numberOpenParenthesis = rootView.findViewById(id);
      if (numberOpenParenthesis == null) {
        break missingId;
      }

      id = R.id.numberPercentage;
      Button numberPercentage = rootView.findViewById(id);
      if (numberPercentage == null) {
        break missingId;
      }

      id = R.id.numberPlus;
      Button numberPlus = rootView.findViewById(id);
      if (numberPlus == null) {
        break missingId;
      }

      id = R.id.numberPlusLess;
      Button numberPlusLess = rootView.findViewById(id);
      if (numberPlusLess == null) {
        break missingId;
      }

      id = R.id.numberPoint;
      Button numberPoint = rootView.findViewById(id);
      if (numberPoint == null) {
        break missingId;
      }

      id = R.id.numberResult;
      Button numberResult = rootView.findViewById(id);
      if (numberResult == null) {
        break missingId;
      }

      return new ActivityCalculatorNewBinding((ConstraintLayout) rootView, ResultField, Title,
          buttonBack, expressionValue, historic, layoutBlock1, layoutBlock2, number0, number1,
          number2, number3, number4, number5, number6, number7, number8, number9, numberAllClear,
          numberBackSpace, numberCloseParenthesis, numberDivide, numberLess, numberMultiply,
          numberOpenParenthesis, numberPercentage, numberPlus, numberPlusLess, numberPoint,
          numberResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

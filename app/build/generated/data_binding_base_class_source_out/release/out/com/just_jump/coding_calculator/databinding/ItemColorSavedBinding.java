// Generated by view binder compiler. Do not edit!
package com.just_jump.coding_calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.button.MaterialButton;
import com.just_jump.coding_calculator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemColorSavedBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView colorCodeHex;

  @NonNull
  public final TextView colorCodeRGB;

  @NonNull
  public final MaterialButton colorSaved;

  @NonNull
  public final MaterialButton deleteSavedColor;

  @NonNull
  public final MaterialButton loadSavedColor;

  @NonNull
  public final TextView titleColorSaved;

  @NonNull
  public final TextView titleHexadecimal;

  @NonNull
  public final TextView titleRGB;

  private ItemColorSavedBinding(@NonNull CardView rootView, @NonNull TextView colorCodeHex,
      @NonNull TextView colorCodeRGB, @NonNull MaterialButton colorSaved,
      @NonNull MaterialButton deleteSavedColor, @NonNull MaterialButton loadSavedColor,
      @NonNull TextView titleColorSaved, @NonNull TextView titleHexadecimal,
      @NonNull TextView titleRGB) {
    this.rootView = rootView;
    this.colorCodeHex = colorCodeHex;
    this.colorCodeRGB = colorCodeRGB;
    this.colorSaved = colorSaved;
    this.deleteSavedColor = deleteSavedColor;
    this.loadSavedColor = loadSavedColor;
    this.titleColorSaved = titleColorSaved;
    this.titleHexadecimal = titleHexadecimal;
    this.titleRGB = titleRGB;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemColorSavedBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemColorSavedBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_color_saved, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemColorSavedBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.colorCodeHex;
      TextView colorCodeHex = rootView.findViewById(id);
      if (colorCodeHex == null) {
        break missingId;
      }

      id = R.id.colorCodeRGB;
      TextView colorCodeRGB = rootView.findViewById(id);
      if (colorCodeRGB == null) {
        break missingId;
      }

      id = R.id.colorSaved;
      MaterialButton colorSaved = rootView.findViewById(id);
      if (colorSaved == null) {
        break missingId;
      }

      id = R.id.deleteSavedColor;
      MaterialButton deleteSavedColor = rootView.findViewById(id);
      if (deleteSavedColor == null) {
        break missingId;
      }

      id = R.id.loadSavedColor;
      MaterialButton loadSavedColor = rootView.findViewById(id);
      if (loadSavedColor == null) {
        break missingId;
      }

      id = R.id.titleColorSaved;
      TextView titleColorSaved = rootView.findViewById(id);
      if (titleColorSaved == null) {
        break missingId;
      }

      id = R.id.titleHexadecimal;
      TextView titleHexadecimal = rootView.findViewById(id);
      if (titleHexadecimal == null) {
        break missingId;
      }

      id = R.id.titleRGB;
      TextView titleRGB = rootView.findViewById(id);
      if (titleRGB == null) {
        break missingId;
      }

      return new ItemColorSavedBinding((CardView) rootView, colorCodeHex, colorCodeRGB, colorSaved,
          deleteSavedColor, loadSavedColor, titleColorSaved, titleHexadecimal, titleRGB);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

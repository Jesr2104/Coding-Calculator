// Generated by view binder compiler. Do not edit!
package com.just_jump.coding_calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.just_jump.coding_calculator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPaletteColorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button Button;

  @NonNull
  public final ImageView ColorInfo;

  @NonNull
  public final TextView NameColor;

  @NonNull
  public final ConstraintLayout mainLayout;

  @NonNull
  public final ConstraintLayout newLayout;

  private ItemPaletteColorBinding(@NonNull ConstraintLayout rootView, @NonNull Button Button,
      @NonNull ImageView ColorInfo, @NonNull TextView NameColor,
      @NonNull ConstraintLayout mainLayout, @NonNull ConstraintLayout newLayout) {
    this.rootView = rootView;
    this.Button = Button;
    this.ColorInfo = ColorInfo;
    this.NameColor = NameColor;
    this.mainLayout = mainLayout;
    this.newLayout = newLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPaletteColorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPaletteColorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_palette_color, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPaletteColorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Button;
      Button Button = rootView.findViewById(id);
      if (Button == null) {
        break missingId;
      }

      id = R.id.ColorInfo;
      ImageView ColorInfo = rootView.findViewById(id);
      if (ColorInfo == null) {
        break missingId;
      }

      id = R.id.NameColor;
      TextView NameColor = rootView.findViewById(id);
      if (NameColor == null) {
        break missingId;
      }

      id = R.id.mainLayout;
      ConstraintLayout mainLayout = rootView.findViewById(id);
      if (mainLayout == null) {
        break missingId;
      }

      id = R.id.newLayout;
      ConstraintLayout newLayout = rootView.findViewById(id);
      if (newLayout == null) {
        break missingId;
      }

      return new ItemPaletteColorBinding((ConstraintLayout) rootView, Button, ColorInfo, NameColor,
          mainLayout, newLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

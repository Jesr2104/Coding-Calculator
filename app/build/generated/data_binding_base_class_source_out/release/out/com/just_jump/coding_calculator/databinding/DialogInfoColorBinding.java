// Generated by view binder compiler. Do not edit!
package com.just_jump.coding_calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.just_jump.coding_calculator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogInfoColorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout HSLPart;

  @NonNull
  public final LinearLayout RGBColor;

  @NonNull
  public final LinearLayout fieldColor;

  @NonNull
  public final TextView hexPart;

  @NonNull
  public final TextView hslPartH;

  @NonNull
  public final TextView hslPartL;

  @NonNull
  public final TextView hslPartS;

  @NonNull
  public final LinearLayout layoutTitle;

  @NonNull
  public final ConstraintLayout mainLayoutPalette;

  @NonNull
  public final TextView rgbBluePart;

  @NonNull
  public final TextView rgbGreenPart;

  @NonNull
  public final TextView rgbRedPart;

  private DialogInfoColorBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout HSLPart,
      @NonNull LinearLayout RGBColor, @NonNull LinearLayout fieldColor, @NonNull TextView hexPart,
      @NonNull TextView hslPartH, @NonNull TextView hslPartL, @NonNull TextView hslPartS,
      @NonNull LinearLayout layoutTitle, @NonNull ConstraintLayout mainLayoutPalette,
      @NonNull TextView rgbBluePart, @NonNull TextView rgbGreenPart, @NonNull TextView rgbRedPart) {
    this.rootView = rootView;
    this.HSLPart = HSLPart;
    this.RGBColor = RGBColor;
    this.fieldColor = fieldColor;
    this.hexPart = hexPart;
    this.hslPartH = hslPartH;
    this.hslPartL = hslPartL;
    this.hslPartS = hslPartS;
    this.layoutTitle = layoutTitle;
    this.mainLayoutPalette = mainLayoutPalette;
    this.rgbBluePart = rgbBluePart;
    this.rgbGreenPart = rgbGreenPart;
    this.rgbRedPart = rgbRedPart;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogInfoColorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogInfoColorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_info_color, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogInfoColorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.HSL_part;
      LinearLayout HSLPart = rootView.findViewById(id);
      if (HSLPart == null) {
        break missingId;
      }

      id = R.id.RGBColor;
      LinearLayout RGBColor = rootView.findViewById(id);
      if (RGBColor == null) {
        break missingId;
      }

      id = R.id.field_color;
      LinearLayout fieldColor = rootView.findViewById(id);
      if (fieldColor == null) {
        break missingId;
      }

      id = R.id.hex_part;
      TextView hexPart = rootView.findViewById(id);
      if (hexPart == null) {
        break missingId;
      }

      id = R.id.hsl_partH;
      TextView hslPartH = rootView.findViewById(id);
      if (hslPartH == null) {
        break missingId;
      }

      id = R.id.hsl_partL;
      TextView hslPartL = rootView.findViewById(id);
      if (hslPartL == null) {
        break missingId;
      }

      id = R.id.hsl_partS;
      TextView hslPartS = rootView.findViewById(id);
      if (hslPartS == null) {
        break missingId;
      }

      id = R.id.layoutTitle;
      LinearLayout layoutTitle = rootView.findViewById(id);
      if (layoutTitle == null) {
        break missingId;
      }

      id = R.id.mainLayoutPalette;
      ConstraintLayout mainLayoutPalette = rootView.findViewById(id);
      if (mainLayoutPalette == null) {
        break missingId;
      }

      id = R.id.rgb_blue_part;
      TextView rgbBluePart = rootView.findViewById(id);
      if (rgbBluePart == null) {
        break missingId;
      }

      id = R.id.rgb_green_part;
      TextView rgbGreenPart = rootView.findViewById(id);
      if (rgbGreenPart == null) {
        break missingId;
      }

      id = R.id.rgb_red_part;
      TextView rgbRedPart = rootView.findViewById(id);
      if (rgbRedPart == null) {
        break missingId;
      }

      return new DialogInfoColorBinding((ConstraintLayout) rootView, HSLPart, RGBColor, fieldColor,
          hexPart, hslPartH, hslPartL, hslPartS, layoutTitle, mainLayoutPalette, rgbBluePart,
          rgbGreenPart, rgbRedPart);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

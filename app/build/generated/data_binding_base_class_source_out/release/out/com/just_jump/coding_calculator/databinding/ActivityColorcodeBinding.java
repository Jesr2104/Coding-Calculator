// Generated by view binder compiler. Do not edit!
package com.just_jump.coding_calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import com.just_jump.coding_calculator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityColorcodeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView AnalogousColor1;

  @NonNull
  public final TextView AnalogousColor2;

  @NonNull
  public final TextView AnalogousColor3;

  @NonNull
  public final TextView AnalogousColor4;

  @NonNull
  public final TextView AnalogousColor5;

  @NonNull
  public final TextView AnalogousColors;

  @NonNull
  public final ImageButton BPaletteColors;

  @NonNull
  public final TextView Color1Complementary;

  @NonNull
  public final ImageButton ColorPicker;

  @NonNull
  public final TextView GreenColorBT;

  @NonNull
  public final TextView HEXBlueValue;

  @NonNull
  public final TextView HEXGreenValue;

  @NonNull
  public final TextView HEXRedValue;

  @NonNull
  public final TextView HSLHueValue;

  @NonNull
  public final TextView HSLLightnessValue;

  @NonNull
  public final TextView HSLSaturationValue;

  @NonNull
  public final TextView RGBValueBlueColor;

  @NonNull
  public final TextView RGBValueGreenColor;

  @NonNull
  public final TextView RGBValueRedColor;

  @NonNull
  public final TextView RedColorBT;

  @NonNull
  public final TextView SplitCCColor1;

  @NonNull
  public final TextView SplitCCColor2;

  @NonNull
  public final TextView TetradicColor1;

  @NonNull
  public final TextView TetradicColor2;

  @NonNull
  public final TextView TetradicColor3;

  @NonNull
  public final TextView TetradicColors;

  @NonNull
  public final TextView TextHSL;

  @NonNull
  public final TextView TextHex;

  @NonNull
  public final TextView TriadicColor1;

  @NonNull
  public final TextView TriadicColor2;

  @NonNull
  public final TextView TriadicColors;

  @NonNull
  public final ImageView analogousInfo;

  @NonNull
  public final TextView blueColorBT;

  @NonNull
  public final Button buttonColor1;

  @NonNull
  public final Button buttonColor2;

  @NonNull
  public final Button buttonColor3;

  @NonNull
  public final TextView buttonSaved;

  @NonNull
  public final TextView complementaryColor;

  @NonNull
  public final ImageView complementaryInfo;

  @NonNull
  public final AppCompatSeekBar controlBarBlue;

  @NonNull
  public final AppCompatSeekBar controlBarGreen;

  @NonNull
  public final AppCompatSeekBar controlBarRed;

  @NonNull
  public final Guideline guideline35Percent;

  @NonNull
  public final TextView mainColor;

  @NonNull
  public final ImageButton moreColors;

  @NonNull
  public final TextView splitComplementaryColors;

  @NonNull
  public final ImageView splitComplementaryInfo;

  @NonNull
  public final ImageView tetradicInfo;

  @NonNull
  public final ImageView triadicInfo;

  private ActivityColorcodeBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView AnalogousColor1, @NonNull TextView AnalogousColor2,
      @NonNull TextView AnalogousColor3, @NonNull TextView AnalogousColor4,
      @NonNull TextView AnalogousColor5, @NonNull TextView AnalogousColors,
      @NonNull ImageButton BPaletteColors, @NonNull TextView Color1Complementary,
      @NonNull ImageButton ColorPicker, @NonNull TextView GreenColorBT,
      @NonNull TextView HEXBlueValue, @NonNull TextView HEXGreenValue,
      @NonNull TextView HEXRedValue, @NonNull TextView HSLHueValue,
      @NonNull TextView HSLLightnessValue, @NonNull TextView HSLSaturationValue,
      @NonNull TextView RGBValueBlueColor, @NonNull TextView RGBValueGreenColor,
      @NonNull TextView RGBValueRedColor, @NonNull TextView RedColorBT,
      @NonNull TextView SplitCCColor1, @NonNull TextView SplitCCColor2,
      @NonNull TextView TetradicColor1, @NonNull TextView TetradicColor2,
      @NonNull TextView TetradicColor3, @NonNull TextView TetradicColors, @NonNull TextView TextHSL,
      @NonNull TextView TextHex, @NonNull TextView TriadicColor1, @NonNull TextView TriadicColor2,
      @NonNull TextView TriadicColors, @NonNull ImageView analogousInfo,
      @NonNull TextView blueColorBT, @NonNull Button buttonColor1, @NonNull Button buttonColor2,
      @NonNull Button buttonColor3, @NonNull TextView buttonSaved,
      @NonNull TextView complementaryColor, @NonNull ImageView complementaryInfo,
      @NonNull AppCompatSeekBar controlBarBlue, @NonNull AppCompatSeekBar controlBarGreen,
      @NonNull AppCompatSeekBar controlBarRed, @NonNull Guideline guideline35Percent,
      @NonNull TextView mainColor, @NonNull ImageButton moreColors,
      @NonNull TextView splitComplementaryColors, @NonNull ImageView splitComplementaryInfo,
      @NonNull ImageView tetradicInfo, @NonNull ImageView triadicInfo) {
    this.rootView = rootView;
    this.AnalogousColor1 = AnalogousColor1;
    this.AnalogousColor2 = AnalogousColor2;
    this.AnalogousColor3 = AnalogousColor3;
    this.AnalogousColor4 = AnalogousColor4;
    this.AnalogousColor5 = AnalogousColor5;
    this.AnalogousColors = AnalogousColors;
    this.BPaletteColors = BPaletteColors;
    this.Color1Complementary = Color1Complementary;
    this.ColorPicker = ColorPicker;
    this.GreenColorBT = GreenColorBT;
    this.HEXBlueValue = HEXBlueValue;
    this.HEXGreenValue = HEXGreenValue;
    this.HEXRedValue = HEXRedValue;
    this.HSLHueValue = HSLHueValue;
    this.HSLLightnessValue = HSLLightnessValue;
    this.HSLSaturationValue = HSLSaturationValue;
    this.RGBValueBlueColor = RGBValueBlueColor;
    this.RGBValueGreenColor = RGBValueGreenColor;
    this.RGBValueRedColor = RGBValueRedColor;
    this.RedColorBT = RedColorBT;
    this.SplitCCColor1 = SplitCCColor1;
    this.SplitCCColor2 = SplitCCColor2;
    this.TetradicColor1 = TetradicColor1;
    this.TetradicColor2 = TetradicColor2;
    this.TetradicColor3 = TetradicColor3;
    this.TetradicColors = TetradicColors;
    this.TextHSL = TextHSL;
    this.TextHex = TextHex;
    this.TriadicColor1 = TriadicColor1;
    this.TriadicColor2 = TriadicColor2;
    this.TriadicColors = TriadicColors;
    this.analogousInfo = analogousInfo;
    this.blueColorBT = blueColorBT;
    this.buttonColor1 = buttonColor1;
    this.buttonColor2 = buttonColor2;
    this.buttonColor3 = buttonColor3;
    this.buttonSaved = buttonSaved;
    this.complementaryColor = complementaryColor;
    this.complementaryInfo = complementaryInfo;
    this.controlBarBlue = controlBarBlue;
    this.controlBarGreen = controlBarGreen;
    this.controlBarRed = controlBarRed;
    this.guideline35Percent = guideline35Percent;
    this.mainColor = mainColor;
    this.moreColors = moreColors;
    this.splitComplementaryColors = splitComplementaryColors;
    this.splitComplementaryInfo = splitComplementaryInfo;
    this.tetradicInfo = tetradicInfo;
    this.triadicInfo = triadicInfo;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityColorcodeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityColorcodeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_colorcode, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityColorcodeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Analogous_Color1;
      TextView AnalogousColor1 = rootView.findViewById(id);
      if (AnalogousColor1 == null) {
        break missingId;
      }

      id = R.id.Analogous_Color2;
      TextView AnalogousColor2 = rootView.findViewById(id);
      if (AnalogousColor2 == null) {
        break missingId;
      }

      id = R.id.Analogous_Color3;
      TextView AnalogousColor3 = rootView.findViewById(id);
      if (AnalogousColor3 == null) {
        break missingId;
      }

      id = R.id.Analogous_Color4;
      TextView AnalogousColor4 = rootView.findViewById(id);
      if (AnalogousColor4 == null) {
        break missingId;
      }

      id = R.id.Analogous_Color5;
      TextView AnalogousColor5 = rootView.findViewById(id);
      if (AnalogousColor5 == null) {
        break missingId;
      }

      id = R.id.Analogous_Colors;
      TextView AnalogousColors = rootView.findViewById(id);
      if (AnalogousColors == null) {
        break missingId;
      }

      id = R.id.BPaletteColors;
      ImageButton BPaletteColors = rootView.findViewById(id);
      if (BPaletteColors == null) {
        break missingId;
      }

      id = R.id.Color1_Complementary;
      TextView Color1Complementary = rootView.findViewById(id);
      if (Color1Complementary == null) {
        break missingId;
      }

      id = R.id.ColorPicker;
      ImageButton ColorPicker = rootView.findViewById(id);
      if (ColorPicker == null) {
        break missingId;
      }

      id = R.id.GreenColorBT;
      TextView GreenColorBT = rootView.findViewById(id);
      if (GreenColorBT == null) {
        break missingId;
      }

      id = R.id.HEX_blueValue;
      TextView HEXBlueValue = rootView.findViewById(id);
      if (HEXBlueValue == null) {
        break missingId;
      }

      id = R.id.HEX_greenValue;
      TextView HEXGreenValue = rootView.findViewById(id);
      if (HEXGreenValue == null) {
        break missingId;
      }

      id = R.id.HEX_redValue;
      TextView HEXRedValue = rootView.findViewById(id);
      if (HEXRedValue == null) {
        break missingId;
      }

      id = R.id.HSL_hueValue;
      TextView HSLHueValue = rootView.findViewById(id);
      if (HSLHueValue == null) {
        break missingId;
      }

      id = R.id.HSL_LightnessValue;
      TextView HSLLightnessValue = rootView.findViewById(id);
      if (HSLLightnessValue == null) {
        break missingId;
      }

      id = R.id.HSL_saturationValue;
      TextView HSLSaturationValue = rootView.findViewById(id);
      if (HSLSaturationValue == null) {
        break missingId;
      }

      id = R.id.RGBValue_BlueColor;
      TextView RGBValueBlueColor = rootView.findViewById(id);
      if (RGBValueBlueColor == null) {
        break missingId;
      }

      id = R.id.RGBValue_GreenColor;
      TextView RGBValueGreenColor = rootView.findViewById(id);
      if (RGBValueGreenColor == null) {
        break missingId;
      }

      id = R.id.RGBValue_RedColor;
      TextView RGBValueRedColor = rootView.findViewById(id);
      if (RGBValueRedColor == null) {
        break missingId;
      }

      id = R.id.RedColorBT;
      TextView RedColorBT = rootView.findViewById(id);
      if (RedColorBT == null) {
        break missingId;
      }

      id = R.id.SplitCC_Color1;
      TextView SplitCCColor1 = rootView.findViewById(id);
      if (SplitCCColor1 == null) {
        break missingId;
      }

      id = R.id.SplitCC_Color2;
      TextView SplitCCColor2 = rootView.findViewById(id);
      if (SplitCCColor2 == null) {
        break missingId;
      }

      id = R.id.Tetradic_Color1;
      TextView TetradicColor1 = rootView.findViewById(id);
      if (TetradicColor1 == null) {
        break missingId;
      }

      id = R.id.Tetradic_Color2;
      TextView TetradicColor2 = rootView.findViewById(id);
      if (TetradicColor2 == null) {
        break missingId;
      }

      id = R.id.Tetradic_Color3;
      TextView TetradicColor3 = rootView.findViewById(id);
      if (TetradicColor3 == null) {
        break missingId;
      }

      id = R.id.Tetradic_Colors;
      TextView TetradicColors = rootView.findViewById(id);
      if (TetradicColors == null) {
        break missingId;
      }

      id = R.id.TextHSL;
      TextView TextHSL = rootView.findViewById(id);
      if (TextHSL == null) {
        break missingId;
      }

      id = R.id.TextHex;
      TextView TextHex = rootView.findViewById(id);
      if (TextHex == null) {
        break missingId;
      }

      id = R.id.Triadic_Color1;
      TextView TriadicColor1 = rootView.findViewById(id);
      if (TriadicColor1 == null) {
        break missingId;
      }

      id = R.id.Triadic_Color2;
      TextView TriadicColor2 = rootView.findViewById(id);
      if (TriadicColor2 == null) {
        break missingId;
      }

      id = R.id.Triadic_Colors;
      TextView TriadicColors = rootView.findViewById(id);
      if (TriadicColors == null) {
        break missingId;
      }

      id = R.id.analogousInfo;
      ImageView analogousInfo = rootView.findViewById(id);
      if (analogousInfo == null) {
        break missingId;
      }

      id = R.id.blueColorBT;
      TextView blueColorBT = rootView.findViewById(id);
      if (blueColorBT == null) {
        break missingId;
      }

      id = R.id.buttonColor1;
      Button buttonColor1 = rootView.findViewById(id);
      if (buttonColor1 == null) {
        break missingId;
      }

      id = R.id.buttonColor2;
      Button buttonColor2 = rootView.findViewById(id);
      if (buttonColor2 == null) {
        break missingId;
      }

      id = R.id.buttonColor3;
      Button buttonColor3 = rootView.findViewById(id);
      if (buttonColor3 == null) {
        break missingId;
      }

      id = R.id.buttonSaved;
      TextView buttonSaved = rootView.findViewById(id);
      if (buttonSaved == null) {
        break missingId;
      }

      id = R.id.complementary_color;
      TextView complementaryColor = rootView.findViewById(id);
      if (complementaryColor == null) {
        break missingId;
      }

      id = R.id.complementaryInfo;
      ImageView complementaryInfo = rootView.findViewById(id);
      if (complementaryInfo == null) {
        break missingId;
      }

      id = R.id.controlBarBlue;
      AppCompatSeekBar controlBarBlue = rootView.findViewById(id);
      if (controlBarBlue == null) {
        break missingId;
      }

      id = R.id.controlBarGreen;
      AppCompatSeekBar controlBarGreen = rootView.findViewById(id);
      if (controlBarGreen == null) {
        break missingId;
      }

      id = R.id.controlBarRed;
      AppCompatSeekBar controlBarRed = rootView.findViewById(id);
      if (controlBarRed == null) {
        break missingId;
      }

      id = R.id.guideline35Percent;
      Guideline guideline35Percent = rootView.findViewById(id);
      if (guideline35Percent == null) {
        break missingId;
      }

      id = R.id.mainColor;
      TextView mainColor = rootView.findViewById(id);
      if (mainColor == null) {
        break missingId;
      }

      id = R.id.moreColors;
      ImageButton moreColors = rootView.findViewById(id);
      if (moreColors == null) {
        break missingId;
      }

      id = R.id.split_complementary_colors;
      TextView splitComplementaryColors = rootView.findViewById(id);
      if (splitComplementaryColors == null) {
        break missingId;
      }

      id = R.id.splitComplementaryInfo;
      ImageView splitComplementaryInfo = rootView.findViewById(id);
      if (splitComplementaryInfo == null) {
        break missingId;
      }

      id = R.id.tetradicInfo;
      ImageView tetradicInfo = rootView.findViewById(id);
      if (tetradicInfo == null) {
        break missingId;
      }

      id = R.id.triadicInfo;
      ImageView triadicInfo = rootView.findViewById(id);
      if (triadicInfo == null) {
        break missingId;
      }

      return new ActivityColorcodeBinding((ConstraintLayout) rootView, AnalogousColor1,
          AnalogousColor2, AnalogousColor3, AnalogousColor4, AnalogousColor5, AnalogousColors,
          BPaletteColors, Color1Complementary, ColorPicker, GreenColorBT, HEXBlueValue,
          HEXGreenValue, HEXRedValue, HSLHueValue, HSLLightnessValue, HSLSaturationValue,
          RGBValueBlueColor, RGBValueGreenColor, RGBValueRedColor, RedColorBT, SplitCCColor1,
          SplitCCColor2, TetradicColor1, TetradicColor2, TetradicColor3, TetradicColors, TextHSL,
          TextHex, TriadicColor1, TriadicColor2, TriadicColors, analogousInfo, blueColorBT,
          buttonColor1, buttonColor2, buttonColor3, buttonSaved, complementaryColor,
          complementaryInfo, controlBarBlue, controlBarGreen, controlBarRed, guideline35Percent,
          mainColor, moreColors, splitComplementaryColors, splitComplementaryInfo, tetradicInfo,
          triadicInfo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.just_jump.coding_calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.just_jump.coding_calculator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPaletteColorsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout layoutColors;

  @NonNull
  public final ConstraintLayout mainLayoutPalette;

  @NonNull
  public final ScrollView scrollView2;

  @NonNull
  public final TextView titleColor;

  private ActivityPaletteColorsBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout layoutColors, @NonNull ConstraintLayout mainLayoutPalette,
      @NonNull ScrollView scrollView2, @NonNull TextView titleColor) {
    this.rootView = rootView;
    this.layoutColors = layoutColors;
    this.mainLayoutPalette = mainLayoutPalette;
    this.scrollView2 = scrollView2;
    this.titleColor = titleColor;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPaletteColorsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPaletteColorsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_palette_colors, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPaletteColorsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.layoutColors;
      LinearLayout layoutColors = rootView.findViewById(id);
      if (layoutColors == null) {
        break missingId;
      }

      ConstraintLayout mainLayoutPalette = (ConstraintLayout) rootView;

      id = R.id.scrollView2;
      ScrollView scrollView2 = rootView.findViewById(id);
      if (scrollView2 == null) {
        break missingId;
      }

      id = R.id.titleColor;
      TextView titleColor = rootView.findViewById(id);
      if (titleColor == null) {
        break missingId;
      }

      return new ActivityPaletteColorsBinding((ConstraintLayout) rootView, layoutColors,
          mainLayoutPalette, scrollView2, titleColor);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
